/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//pixelFog project by Yuan and Alex
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
import processing.serial.*;
import hypermedia.net.*; 
import peasy.*; 
PeasyCam cam;
UDP udp;  
String getData;
ArrayList pointCloud;
PFont font01,font02,font03;
int S01 = 0; int S02 = 0; int S03 = 0; int S04 = 0; int S05 = 0; int S06 = 0; int S07 = 0;
int S08 = 0; int S09 = 0; int S10 = 0; int S11 = 0; int S12 = 0; int S13 = 0; int S14 = 0;
int S15 = 0; int S16 = 0; int S17 = 0; int S18 = 0;
Serial port;

/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
void setup() {

  size(1000,600,P3D);
  font01 = loadFont("Arial-BoldMT-50.vlw");
  font02 = loadFont("Arial-BoldMT-25.vlw");
  font03 = loadFont("Arial-BoldMT-10.vlw");
  //sketch to the desired serial port.
  println(Serial.list());
  port = new Serial(this, Serial.list()[0], 9600);
  //port.buffer(3000);
  port.bufferUntil('\n');  
  if(camCenter != null) getCamCenter();
  cam = new PeasyCam(this, 500);
  udp = new UDP(this, 6001);
  udp.listen( true );
  setupGUI();
}


void draw() {
 background(190);
 displayAxis();
 update();
 sendToArduino();
 gui(); 
}

/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
int buffer = 0;
void sendToArduino(){  
  
   if(buffer > 300){
     
     port.write("s" + S01);
     //println("s" + S01);
     buffer = 0;
     
   }
   buffer++;
}
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
import controlP5.*;
ControlP5 controlP5;
boolean getObject = false;
//for GUI/////////////////////////////////////////////////////////////////
PMatrix3D currCameraMatrix;
PGraphics3D g3; 
//////////////////////////////////////////////////////////////////////////

void setupGUI(){
  
  controlP5 = new ControlP5(this);
  controlP5.setControlFont(font03);
  controlP5.setColorBackground(color(0));
  controlP5.setColorActive(color(255,0,0));
  controlP5.setColorForeground(color(100));
  controlP5.setColorLabel(color(255));
  /////////////////////////////////////// min,max, ,  x,  y,//////////
  Slider s1 = controlP5.addSlider("S01", 0, 255, 0, 10, 102, 100, 10); 
  s1.setId(1);
  Slider s2 = controlP5.addSlider("S02", 0, 180, 0, 10, 114, 100, 10); 
  s2.setId(2);
  Slider s3 = controlP5.addSlider("S03", 0, 180, 0, 10, 126, 100, 10); 
  s3.setId(3);
  Slider s4 = controlP5.addSlider("S04", 0, 180, 0, 10, 138, 100, 10); 
  s4.setId(4);
  Slider s5 = controlP5.addSlider("S05", 0, 180, 0, 10, 150, 100, 10); 
  s5.setId(5);
  Slider s6 = controlP5.addSlider("S06", 0, 180, 0, 10, 162, 100, 10); 
  s6.setId(6);
  Slider s7 = controlP5.addSlider("S07", 0, 180, 0, 10, 174, 100, 10); 
  s7.setId(7);
  Slider s8 = controlP5.addSlider("S08", 0, 180, 0, 10, 186, 100, 10); 
  s8.setId(8);
  Slider s9 = controlP5.addSlider("S09", 0, 180, 0, 10, 198, 100, 10); 
  s9.setId(9);
  Slider s10 = controlP5.addSlider("S10", 0, 180, 0, 10, 210, 100, 10); 
  s10.setId(10);
  Slider s11 = controlP5.addSlider("S11", 0, 180, 0, 10, 222, 100, 10); 
  s11.setId(11);
  Slider s12 = controlP5.addSlider("S12", 0, 180, 0, 10, 234, 100, 10); 
  s12.setId(12);
  Slider s13 = controlP5.addSlider("S13", 0, 180, 0, 10, 246, 100, 10); 
  s13.setId(13);
  Slider s14 = controlP5.addSlider("S14", 0, 180, 0, 10, 258, 100, 10); 
  s14.setId(14);
  Slider s15 = controlP5.addSlider("S15", 0, 180, 0, 10, 270, 100, 10); 
  s15.setId(15);
  Slider s16 = controlP5.addSlider("S16", 0, 180, 0, 10, 282, 100, 10); 
  s16.setId(16);
  Slider s17 = controlP5.addSlider("S17", 0, 180, 0, 10, 294, 100, 10); 
  s17.setId(17);
  Slider s18 = controlP5.addSlider("S18", 0, 180, 0, 10, 306, 100, 10); 
  s18.setId(18);
  
  controlP5.addButton("RESET", 0, 10, 80, 42, 20);  
  controlP5.setAutoDraw(false);  
}

void controlEvent(ControlEvent theEvent) {

  switch(theEvent.controller().id()){
    
    case(1):
    S01 = (int)theEvent.controller().value();
    break;
    case(2):
    S02 = (int)theEvent.controller().value();
    break;
    case(3):
    S03 = (int)theEvent.controller().value();
    break;
    case(4):
    S04 = (int)theEvent.controller().value();
    break;
    case(5):
    S05 = (int)theEvent.controller().value();
    break;
    case(6):
    S06 = (int)theEvent.controller().value();
    break;
    case(7):
    S07 = (int)theEvent.controller().value();
    break;
    case(8):
    S08 = (int)theEvent.controller().value();
    break;
    case(9):
    S09 = (int)theEvent.controller().value();
    break;
    case(10):
    S10 = (int)theEvent.controller().value();
    break;
    case(11):
    S11 = (int)theEvent.controller().value();
    break;
    case(12):
    S12 = (int)theEvent.controller().value();
    break;
    case(13):
    S13 = (int)theEvent.controller().value();
    break;
    case(14):
    S14 = (int)theEvent.controller().value();
    break;
    case(15):
    S15 = (int)theEvent.controller().value();
    break;
    case(16):
    S16 = (int)theEvent.controller().value();
    break;
    case(17):
    S17 = (int)theEvent.controller().value();
    break;
    case(18):
    S18 = (int)theEvent.controller().value();
    break;     
  }  
} 

void RESET(){
  
  setup();   
}

void gui(){
   
  if(mouseX < 200 && mouseY < 200) cam.setActive(false);
  if(mouseX > 200 && mouseY > 200) cam.setActive(true);
   
  cam.beginHUD();
  camera();
  controlP5.draw(); 
  textMode(SCREEN);
  fill(0);
  stroke(0);
  textFont(font02, 25);
  text("FOGMATRIX", 10, 30);

  textFont(font02, 10);
  text("V0.1", 160, 30);
  
  fill(255);
  stroke(255);
  textFont(font02, 10);
  text("copyright  SINLAB", 10, 50);
  
  fill(255);
  stroke(255);
  textFont(font02, 10);
  text("Prof. Jeffrey Huang", 10, 60);
  text("Project by Shih-Yuan Wang and Alex Barchiesi", 10, 70);
   
  cam.endHUD(); 
 }
 
 /////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
void receive( byte[] data, String ip, int port ){  // <-- extended handler
  String message = new String( data );   
  println(message);
  getData = message;
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
PVector camCenter;
PVector axisCenter;

void getPoints(){
  
  pointCloud = new ArrayList();
  String [] getPts01 = new String[1];
  getPts01[0] = getData; 
  String [] getPts02 = new String[1]; 
  
  if(getPts01[0] != null){
    getPts02 = split(getPts01[0],'|');
  }

  for(int i = 0; i < getPts02.length-1; i++){
    if(getPts02[i] != null){
      String [] fields = split(getPts02[i],',');   
      float x = float(fields[0]);
      float y = float(fields[1]);
      float z = float(fields[2]); 
      int index = int(fields[3]);
      float time = float(fields[4]);
      camCenter = new PVector(float(fields[5]),float(fields[6]),float(fields[7]));
      PVector location = new PVector(x,y,z);
      Points ptLoc = new Points(location,index,time);
      pointCloud.add(ptLoc); 
      
      if(i == 0) axisCenter = new PVector(x,y,z);    
    }   
  }
}

void displayPoint(){
  Points getPt;
  for(int i = 0; i < pointCloud.size(); i++){
   
     getPt = (Points)pointCloud.get(i);
     getPt.display();
  }
}

void displayTextPts(){
  
  Points getPt;
  for(int i = 0; i < pointCloud.size(); i++){
   
     getPt = (Points)pointCloud.get(i);
     if(getPt.getIndex() == 0){
       
       fill(255,0,100);
       noStroke();
       textFont(font01, 4);
       text(i, getPt.getLocation().x, getPt.getLocation().y,getPt.getLocation().z);       
     }else if(getPt.getIndex() == 1){
      
       fill(0,0,255);
       noStroke();
       textFont(font01, 4);
       text(i, getPt.getLocation().x, getPt.getLocation().y,getPt.getLocation().z);       
     }         
  } 
}

void update(){
  
  getPoints();
  displayPoint();
  displayTextPts(); 
 
}

void displayAxis(){
  
 if(axisCenter != null){
   //x
   stroke(255,0,0);
   strokeWeight(2);
   line(axisCenter.x,axisCenter.y,axisCenter.z,axisCenter.x+10,axisCenter.y,axisCenter.z);
   //y
   stroke(0,0,255);
   strokeWeight(2);
   line(axisCenter.x,axisCenter.y,axisCenter.z,axisCenter.x,axisCenter.y+10,axisCenter.z);
   //z
   stroke(0,255,0);
   strokeWeight(2);
   line(axisCenter.x,axisCenter.y,axisCenter.z,axisCenter.x,axisCenter.y,axisCenter.z+10); 
 }    
}

void getCamCenter(){
  
 cam.lookAt(camCenter.x, camCenter.y, camCenter.z, 0);
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

class Points{
  
 //////////////////////////////////////////////////////////////////////////
 //PROPERTIES//////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////
 PVector location;
 int index;
 float time;
  
 ////////////////////////////////////////////////////////////////////////// 
 //CONSTRUCTOR/////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////
 Points(PVector location, int index, float time){
   
  this.location = location;
  this.index = index;
  this.time = time;
 }

 //////////////////////////////////////////////////////////////////////////
 //METHOD////////////////////////////////////////////////////////////////// 
 //////////////////////////////////////////////////////////////////////////
 void display(){
   
  if(index == 0){  
    stroke(255,255,255);
    strokeWeight(4);
    point(location.x,location.y,location.z);   
  }else if(index == 1){
    stroke(0,0,0);
    strokeWeight(4);
    point(location.x,location.y,location.z);   
  }   
 }
  
 PVector getLocation(){
   
  return location; 
 }
 
 int getIndex(){
   
  return index; 
 }
 
 float getTime(){
   
  return time; 
 }
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////



